facet_wrap(~PY, drop = FALSE) +
theme(legend.position="right")+
coord_polar() +
theme(plot.title = element_text(size=20),
strip.text.x = element_text(size=20),
strip.background = element_rect(fill = "white"),
panel.background = element_rect(fill ="white"),
axis.title = element_text(size = 20),
axis.text.x = element_text(size = 20),
axis.text.y = element_text(size = 20),
legend.text = element_text(size = 20),
legend.title = element_text(size = 20),
legend.key.height = unit(1, "in"),
axis.title.y=element_text(margin=margin(0,20,0,0)),
axis.title.x=element_text(margin=margin(20,0,0,0)),
plot.margin = margin(20, 20, 20, 20))
yearplot_pharm_total
yearplot_pharm_total <-  ggplot(dataplot_pharm %>% filter(PY >= 2015),
aes(x = term, y = PROP_COUNT, group = PY)) +
geom_bar(aes(fill = COUNT_PUBS), stat = "identity", color = "black") +
scale_fill_viridis_c(option = "plasma",
name = "Number of \nPublications") +
ylab("Proportion of Abstracts") +
xlab("Publication Year")+
theme_minimal()+
facet_wrap(~PY, drop = FALSE) +
theme(legend.position="right")+
coord_polar() +
theme(plot.title = element_text(size=20),
strip.text.x = element_text(size=20),
strip.background = element_rect(fill = "white"),
panel.background = element_rect(fill ="white"),
axis.title = element_text(size = 20),
axis.text.x = element_text(size = 20),
axis.text.y = element_text(size = 20),
legend.text = element_text(size = 20),
legend.title = element_text(size = 20),
legend.key.height = unit(1, "in"),
axis.title.y=element_text(margin=margin(0,20,0,0)),
axis.title.x=element_text(margin=margin(20,0,0,0)),
plot.margin = margin(20, 20, 20, 20))
yearplot_pharm_total
df_count_binary_sustainable <- df_count_binary %>%
spread(term, ABcontains_total) %>%
filter((sustainability == 1 | resilience == 1)) %>%
select(-sustainability, -resilience) %>%
gather(term, ABcontains_total, adaptability:utility)
df_count_wo_na_part2 <- df_count_binary_sustainable %>%
# Select studies that have at least one PPCP referenced
filter(ABcontains_total == 1) %>%
# Group by abstract, year, and pharmaceutical class
group_by(PY, term) %>%
# Count the number of titles that reference a given pharmaceutial class
summarize(COUNT_PUBS = n_distinct(TI)) %>%
# Filter for pubs after 1990
filter(PY >= 1990) %>%
spread(term, COUNT_PUBS) %>%
# Replace NA values with 0
# replace_na(list(antibiotic = 0,
#                 fragrance = 0,
#                 hormone = 0,
#                 `nonprescription drug` = 0,
#                 `prescription drug` = 0)) %>%
gather(term, COUNT_PUBS, adaptability:utility)
DI_count_total <- df_count_binary %>%
# Select all studies that reference at least one pharmaceutical class
filter(ABcontains_total == 1) %>%
# Group by year
group_by(PY) %>%
# Sum the number of titles in a given year
summarize(TOTAL_TI = n_distinct(TI)) %>%
# Filter for all papers pulished after 1990
filter(PY >= 1990)
dataplot_pharm <- full_join(df_count_wo_na_part2, DI_count_total) %>%
ungroup() %>%
# Group by abstract year and pharmaceutical class
group_by(PY, term) %>%
# Calculate proportions for analysis
mutate(PROP_COUNT = COUNT_PUBS/TOTAL_TI,
PROP_COUNT = ifelse(is.nan(PROP_COUNT), 0, PROP_COUNT)) %>%
as.data.frame()
yearplot_pharm_total <-  ggplot(dataplot_pharm %>% filter(PY >= 2015),
aes(x = term, y = PROP_COUNT, group = PY)) +
geom_bar(aes(fill = COUNT_PUBS), stat = "identity", color = "black") +
scale_fill_viridis_c(option = "plasma",
name = "Number of \nPublications") +
ylab("Proportion of Abstracts") +
xlab("Publication Year")+
theme_minimal()+
facet_wrap(~PY, drop = FALSE) +
theme(legend.position="right")+
coord_polar() +
theme(plot.title = element_text(size=20),
strip.text.x = element_text(size=20),
strip.background = element_rect(fill = "white"),
panel.background = element_rect(fill ="white"),
axis.title = element_text(size = 20),
axis.text.x = element_text(size = 20),
axis.text.y = element_text(size = 20),
legend.text = element_text(size = 20),
legend.title = element_text(size = 20),
legend.key.height = unit(1, "in"),
axis.title.y=element_text(margin=margin(0,20,0,0)),
axis.title.x=element_text(margin=margin(20,0,0,0)),
plot.margin = margin(20, 20, 20, 20))
yearplot_pharm_total
focal_terms <- c("sustainability", "sustainable", "resilience", "resilient",
"security", "social", "socioeconomic",
"efficiency", "efficient", "utilization", "utility",
"vulnerability", "vulnerable", "adaptation", "adaptability",
"variability", "uncertainty", "health")
df_count <- df_wide %>%
select(PY, AB, TI, DI)
# Create an empty character vector where we will put focal terms
df_count$focal_term <- ""
# Create an empty numeric column to count number of times a term appears
df_count$ABcontains <- 0
# Convert Publication Year to a numeric
df_count$PY <- as.numeric(df_count$PY)
# Copy this dataframe to a "final dataframe version"
df_count_final <- df_count
# For loop to iterate through each focal pharm in character vector
for (i in 1:length(focal_terms)){
# Assign temporary variable for a particular pharm
termi <- paste("\\b", focal_terms[i], "\\b", sep = "")
# Create a temporary dataframe
dfi <- df_count
# Search for instances of focal pharm in the abstract
whichi <- grep(termi, dfi$AB, ignore.case = TRUE)
# Create a reference to which pharm is present within the abstract
dfi$term <- focal_terms[i]
# Assign a value of one to abstracts that contain a given pharm
dfi$ABcontains[whichi] <- 1
# Start the final dataframe if this is the first iteration through the for loop
if(i==1){df_count_final <- dfi}
# Combine the final dataframe with the temporary after the first for loop iteration
if(i>1){df_count_final <- rbind(df_count_final,dfi)}
}
# I added a step that makes sure ABcontains only has a value of 1 or 0.
df_count_binary <- df_count_final %>%
mutate(term = ifelse(term == "sustainable", "sustainability", term),
term = ifelse(term == "resilient", "resilience", term),
term = ifelse(term == "efficient", "efficiency", term),
term = ifelse(term == "vulnerable", "vulnerability", term),
term = ifelse(term == "adaptation", "adaptability", term)) %>%
group_by(PY, TI, term) %>%
summarize(ABcontains_total = sum(ABcontains, na.rm = TRUE)) %>%
mutate(ABcontains_total = ifelse(ABcontains_total > 1, 1, ABcontains_total))
df_count_binary_sustainable <- df_count_binary %>%
spread(term, ABcontains_total) %>%
filter((sustainability == 1 | resilience == 1)) %>%
select(-sustainability, -resilience) %>%
gather(term, ABcontains_total, adaptability:utility)
df_count_wo_na_part2 <- df_count_binary_sustainable %>%
# Select studies that have at least one PPCP referenced
filter(ABcontains_total == 1) %>%
# Group by abstract, year, and pharmaceutical class
group_by(PY, term) %>%
# Count the number of titles that reference a given pharmaceutial class
summarize(COUNT_PUBS = n_distinct(TI)) %>%
# Filter for pubs after 1990
filter(PY >= 1990) %>%
spread(term, COUNT_PUBS) %>%
# Replace NA values with 0
# replace_na(list(antibiotic = 0,
#                 fragrance = 0,
#                 hormone = 0,
#                 `nonprescription drug` = 0,
#                 `prescription drug` = 0)) %>%
gather(term, COUNT_PUBS, adaptability:utility)
DI_count_total <- df_count_binary %>%
# Select all studies that reference at least one pharmaceutical class
filter(ABcontains_total == 1) %>%
# Group by year
group_by(PY) %>%
# Sum the number of titles in a given year
summarize(TOTAL_TI = n_distinct(TI)) %>%
# Filter for all papers pulished after 1990
filter(PY >= 1990)
dataplot_pharm <- full_join(df_count_wo_na_part2, DI_count_total) %>%
ungroup() %>%
# Group by abstract year and pharmaceutical class
group_by(PY, term) %>%
# Calculate proportions for analysis
mutate(PROP_COUNT = COUNT_PUBS/TOTAL_TI,
PROP_COUNT = ifelse(is.nan(PROP_COUNT), 0, PROP_COUNT)) %>%
as.data.frame()
yearplot_pharm_total <-  ggplot(dataplot_pharm %>% filter(PY >= 2015),
aes(x = term, y = PROP_COUNT, group = PY)) +
geom_bar(aes(fill = COUNT_PUBS), stat = "identity", color = "black") +
scale_fill_viridis_c(option = "plasma",
name = "Number of \nPublications") +
ylab("Proportion of Abstracts") +
xlab("Publication Year")+
theme_minimal()+
facet_wrap(~PY, drop = FALSE) +
theme(legend.position="right")+
coord_polar() +
theme(plot.title = element_text(size=20),
strip.text.x = element_text(size=20),
strip.background = element_rect(fill = "white"),
panel.background = element_rect(fill ="white"),
axis.title = element_text(size = 20),
axis.text.x = element_text(size = 20),
axis.text.y = element_text(size = 20),
legend.text = element_text(size = 20),
legend.title = element_text(size = 20),
legend.key.height = unit(1, "in"),
axis.title.y=element_text(margin=margin(0,20,0,0)),
axis.title.x=element_text(margin=margin(20,0,0,0)),
plot.margin = margin(20, 20, 20, 20))
yearplot_pharm_total
focal_terms <- c("sustainability", "sustainable", "resilience", "resilient", "social", "socioeconomic",
"efficiency", "efficient", "utilization", "utility",
"vulnerability", "vulnerable", "adaptation", "adaptability",
"variability", "uncertainty", "health")
df_count <- df_wide %>%
select(PY, AB, TI, DI)
# Create an empty character vector where we will put focal terms
df_count$focal_term <- ""
# Create an empty numeric column to count number of times a term appears
df_count$ABcontains <- 0
# Convert Publication Year to a numeric
df_count$PY <- as.numeric(df_count$PY)
# Copy this dataframe to a "final dataframe version"
df_count_final <- df_count
# For loop to iterate through each focal pharm in character vector
for (i in 1:length(focal_terms)){
# Assign temporary variable for a particular pharm
termi <- paste("\\b", focal_terms[i], "\\b", sep = "")
# Create a temporary dataframe
dfi <- df_count
# Search for instances of focal pharm in the abstract
whichi <- grep(termi, dfi$AB, ignore.case = TRUE)
# Create a reference to which pharm is present within the abstract
dfi$term <- focal_terms[i]
# Assign a value of one to abstracts that contain a given pharm
dfi$ABcontains[whichi] <- 1
# Start the final dataframe if this is the first iteration through the for loop
if(i==1){df_count_final <- dfi}
# Combine the final dataframe with the temporary after the first for loop iteration
if(i>1){df_count_final <- rbind(df_count_final,dfi)}
}
# I added a step that makes sure ABcontains only has a value of 1 or 0.
df_count_binary <- df_count_final %>%
mutate(term = ifelse(term == "sustainable", "sustainability", term),
term = ifelse(term == "resilient", "resilience", term),
term = ifelse(term == "efficient", "efficiency", term),
term = ifelse(term == "vulnerable", "vulnerability", term),
term = ifelse(term == "adaptation", "adaptability", term)) %>%
group_by(PY, TI, term) %>%
summarize(ABcontains_total = sum(ABcontains, na.rm = TRUE)) %>%
mutate(ABcontains_total = ifelse(ABcontains_total > 1, 1, ABcontains_total))
df_count_binary_sustainable <- df_count_binary %>%
spread(term, ABcontains_total) %>%
filter((sustainability == 1 | resilience == 1)) %>%
select(-sustainability, -resilience) %>%
gather(term, ABcontains_total, adaptability:utility)
df_count_wo_na_part2 <- df_count_binary_sustainable %>%
# Select studies that have at least one PPCP referenced
filter(ABcontains_total == 1) %>%
# Group by abstract, year, and pharmaceutical class
group_by(PY, term) %>%
# Count the number of titles that reference a given pharmaceutial class
summarize(COUNT_PUBS = n_distinct(TI)) %>%
# Filter for pubs after 1990
filter(PY >= 1990) %>%
spread(term, COUNT_PUBS) %>%
# Replace NA values with 0
# replace_na(list(antibiotic = 0,
#                 fragrance = 0,
#                 hormone = 0,
#                 `nonprescription drug` = 0,
#                 `prescription drug` = 0)) %>%
gather(term, COUNT_PUBS, adaptability:utility)
DI_count_total <- df_count_binary %>%
# Select all studies that reference at least one pharmaceutical class
filter(ABcontains_total == 1) %>%
# Group by year
group_by(PY) %>%
# Sum the number of titles in a given year
summarize(TOTAL_TI = n_distinct(TI)) %>%
# Filter for all papers pulished after 1990
filter(PY >= 1990)
dataplot_pharm <- full_join(df_count_wo_na_part2, DI_count_total) %>%
ungroup() %>%
# Group by abstract year and pharmaceutical class
group_by(PY, term) %>%
# Calculate proportions for analysis
mutate(PROP_COUNT = COUNT_PUBS/TOTAL_TI,
PROP_COUNT = ifelse(is.nan(PROP_COUNT), 0, PROP_COUNT)) %>%
as.data.frame()
yearplot_pharm_total <-  ggplot(dataplot_pharm %>% filter(PY >= 2015),
aes(x = term, y = PROP_COUNT, group = PY)) +
geom_bar(aes(fill = COUNT_PUBS), stat = "identity", color = "black") +
scale_fill_viridis_c(option = "plasma",
name = "Number of \nPublications") +
ylab("Proportion of Abstracts") +
xlab("Publication Year")+
theme_minimal()+
facet_wrap(~PY, drop = FALSE) +
theme(legend.position="right")+
coord_polar() +
theme(plot.title = element_text(size=20),
strip.text.x = element_text(size=20),
strip.background = element_rect(fill = "white"),
panel.background = element_rect(fill ="white"),
axis.title = element_text(size = 20),
axis.text.x = element_text(size = 20),
axis.text.y = element_text(size = 20),
legend.text = element_text(size = 20),
legend.title = element_text(size = 20),
legend.key.height = unit(1, "in"),
axis.title.y=element_text(margin=margin(0,20,0,0)),
axis.title.x=element_text(margin=margin(20,0,0,0)),
plot.margin = margin(20, 20, 20, 20))
yearplot_pharm_total
focal_terms <- c("sustainability", "sustainable", "resilience", "resilient", "social",
"efficiency", "efficient", "utilization", "utility",
"vulnerability", "vulnerable", "adaptation", "adaptability",
"variability", "uncertainty", "health")
df_count <- df_wide %>%
select(PY, AB, TI, DI)
# Create an empty character vector where we will put focal terms
df_count$focal_term <- ""
# Create an empty numeric column to count number of times a term appears
df_count$ABcontains <- 0
# Convert Publication Year to a numeric
df_count$PY <- as.numeric(df_count$PY)
# Copy this dataframe to a "final dataframe version"
df_count_final <- df_count
# For loop to iterate through each focal pharm in character vector
for (i in 1:length(focal_terms)){
# Assign temporary variable for a particular pharm
termi <- paste("\\b", focal_terms[i], "\\b", sep = "")
# Create a temporary dataframe
dfi <- df_count
# Search for instances of focal pharm in the abstract
whichi <- grep(termi, dfi$AB, ignore.case = TRUE)
# Create a reference to which pharm is present within the abstract
dfi$term <- focal_terms[i]
# Assign a value of one to abstracts that contain a given pharm
dfi$ABcontains[whichi] <- 1
# Start the final dataframe if this is the first iteration through the for loop
if(i==1){df_count_final <- dfi}
# Combine the final dataframe with the temporary after the first for loop iteration
if(i>1){df_count_final <- rbind(df_count_final,dfi)}
}
# I added a step that makes sure ABcontains only has a value of 1 or 0.
df_count_binary <- df_count_final %>%
mutate(term = ifelse(term == "sustainable", "sustainability", term),
term = ifelse(term == "resilient", "resilience", term),
term = ifelse(term == "efficient", "efficiency", term),
term = ifelse(term == "vulnerable", "vulnerability", term),
term = ifelse(term == "adaptation", "adaptability", term)) %>%
group_by(PY, TI, term) %>%
summarize(ABcontains_total = sum(ABcontains, na.rm = TRUE)) %>%
mutate(ABcontains_total = ifelse(ABcontains_total > 1, 1, ABcontains_total))
df_count_binary_sustainable <- df_count_binary %>%
spread(term, ABcontains_total) %>%
filter((sustainability == 1 | resilience == 1)) %>%
select(-sustainability, -resilience) %>%
gather(term, ABcontains_total, adaptability:utility)
df_count_wo_na_part2 <- df_count_binary_sustainable %>%
# Select studies that have at least one PPCP referenced
filter(ABcontains_total == 1) %>%
# Group by abstract, year, and pharmaceutical class
group_by(PY, term) %>%
# Count the number of titles that reference a given pharmaceutial class
summarize(COUNT_PUBS = n_distinct(TI)) %>%
# Filter for pubs after 1990
filter(PY >= 1990) %>%
spread(term, COUNT_PUBS) %>%
# Replace NA values with 0
# replace_na(list(antibiotic = 0,
#                 fragrance = 0,
#                 hormone = 0,
#                 `nonprescription drug` = 0,
#                 `prescription drug` = 0)) %>%
gather(term, COUNT_PUBS, adaptability:utility)
DI_count_total <- df_count_binary %>%
# Select all studies that reference at least one pharmaceutical class
filter(ABcontains_total == 1) %>%
# Group by year
group_by(PY) %>%
# Sum the number of titles in a given year
summarize(TOTAL_TI = n_distinct(TI)) %>%
# Filter for all papers pulished after 1990
filter(PY >= 1990)
dataplot_pharm <- full_join(df_count_wo_na_part2, DI_count_total) %>%
ungroup() %>%
# Group by abstract year and pharmaceutical class
group_by(PY, term) %>%
# Calculate proportions for analysis
mutate(PROP_COUNT = COUNT_PUBS/TOTAL_TI,
PROP_COUNT = ifelse(is.nan(PROP_COUNT), 0, PROP_COUNT)) %>%
as.data.frame()
yearplot_pharm_total <-  ggplot(dataplot_pharm %>% filter(PY >= 2015),
aes(x = term, y = PROP_COUNT, group = PY)) +
geom_bar(aes(fill = COUNT_PUBS), stat = "identity", color = "black") +
scale_fill_viridis_c(option = "plasma",
name = "Number of \nPublications") +
ylab("Proportion of Abstracts") +
xlab("Publication Year")+
theme_minimal()+
facet_wrap(~PY, drop = FALSE) +
theme(legend.position="right")+
coord_polar() +
theme(plot.title = element_text(size=20),
strip.text.x = element_text(size=20),
strip.background = element_rect(fill = "white"),
panel.background = element_rect(fill ="white"),
axis.title = element_text(size = 20),
axis.text.x = element_text(size = 20),
axis.text.y = element_text(size = 20),
legend.text = element_text(size = 20),
legend.title = element_text(size = 20),
legend.key.height = unit(1, "in"),
axis.title.y=element_text(margin=margin(0,20,0,0)),
axis.title.x=element_text(margin=margin(20,0,0,0)),
plot.margin = margin(20, 20, 20, 20))
yearplot_pharm_total
setwd("C:/Users/michael.f.meyer/Dropbox/Baikal_sewage_osf/R_scripts_numbered")
output_dir <- file.path(main_dir, sub_dir)
install.packages("here")
here::here()
output_dir <- file.path(here::here(), sub_dir)
sub_dir <- "clean_disaggregated_data"
output_dir <- file.path(here::here(), sub_dir)
output_dir
if (!dir.exists(output_dir)){
dir.create(output_dir)
} else {
print("Dir already exists!")
}
print("Dir 'clean_disaggregated_data' already exists!")
sub_dir <- "cleaned_data"
output_dir <- file.path(here::here(), sub_dir)
if (!dir.exists(output_dir)){
dir.create(output_dir)
} else {
print("Dir 'cleaned_data' already exists!")
}
sub_dir <- "figures"
output_dir <- file.path(here::here(), sub_dir)
if (!dir.exists(output_dir)){
dir.create(output_dir)
} else {
print("Dir 'cleaned_data' already exists!")
}
# PPCP Data
ppcp <- read.csv(file = "../cleaned_data/ppcp.csv",
header = TRUE, stringsAsFactors = FALSE)
# Nutrient data
nutrients <- read.csv(file = "../cleaned_data/nutrients.csv",
header = TRUE, stringsAsFactors = FALSE)
# Stable isotope data
stable_isotopes <- read.csv(file = "../cleaned_data/stable_isotopes.csv",
header = TRUE, stringsAsFactors = FALSE)
# Chlorophyll a data
chlorophylla <- read.csv(file = "../cleaned_data/chlorophylla.csv",
header = TRUE, stringsAsFactors = FALSE)
# Microplastics data
microplastics <- read.csv(file = "../cleaned_data/microplastics.csv",
header = TRUE, stringsAsFactors = FALSE)
# Site metadata
metadata <- read.csv(file = "../cleaned_data/metadata.csv",
header = TRUE, stringsAsFactors = FALSE)
# Site distance data
distance <- read.csv(file = "../cleaned_data/distance_weighted_population_metrics.csv",
header = TRUE, stringsAsFactors = FALSE)
# Join site metadata with distance data
metadata_dist <- full_join(x = metadata, y = distance, by = "site")
dir_create("../figures")
# Join PPCP data with metadata/distance and create two custom metrics
ppcp_meta_dist <- full_join(x = ppcp, y = metadata_dist, by = "site")
# Analyze total PPCPs as a function of population intensity
ppcp_PI_model <- lm(log10(ppcp_sum) ~ log10(distance_weighted_population),
data = ppcp_meta_dist)
# View model results
summary(ppcp_PI_model)
# Plot linear model
ppcp_PI_plot <- ggplot(data = ppcp_meta_dist,
aes(x = log10(distance_weighted_population),
y =  log10(ppcp_sum))) +
geom_point() +
geom_smooth(method = "lm", se = TRUE) +
ylab("log10([Total PPCP])") +
xlab("log10(IDW Population)") +
ggtitle("PPCP vs. IDW Population") +
annotate(geom = "label", x = 3.5, y = -2.65,
label = paste("p-value: ",
round(summary(ppcp_PI_model)$coefficients[2, 4], 3),
"\nR-squared: ",
round(summary(ppcp_PI_model)$r.squared, 3)),
parse = FALSE) +
theme_minimal()
# Export plot
ggsave(filename = "../figures/ppcp_PI_plot.png", plot = ppcp_PI_plot,
device = "png", width = 18, height = 12, units = "in")
# Check if tables directory exists
# If not, create the tables directory
sub_dir <- "tables"
output_dir <- file.path(here::here(), sub_dir)
if (!dir.exists(output_dir)){
dir.create(output_dir)
} else {
print("Dir 'tables' already exists!")
}
df_wide %>%
filter(PY >= 2015) %>%
nrow()
